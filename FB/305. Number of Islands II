305. Number of Islands II

A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).

0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.

1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.

1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.

1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.

1 1 0
0 0 1   Number of islands = 3
0 1 0
We return the result as an array: [1, 1, 2, 3]



based on quick find   

public class Solution {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        int[][] dirs = new int[][]{{-1,0},{1,0},{0,1},{0,-1}};
          unionFind uf = new unionFind(m*n);
          List<Integer> res = new ArrayList<Integer>();
          for (int[] pos : positions) {
              int cur = pos[0]*n + pos[1];
              uf.ids[cur] = cur;
              uf.count++;
             for (int[] dir : dirs) {
                 int x = dir[0] + pos[0];
                 int y = dir[1] + pos[1];
                 int nb = x*n+y;
                 if (x<0 || x>=m || y<0 || y>=n || uf.ids[nb]==-1) continue;
                 if (uf.find(nb) != uf.find(cur)) {
                     uf.union(nb, cur);
                 }
             }
             res.add(uf.count);
         }
         return res;
     }
     
         public class unionFind {
             int[] ids;
             int count;
             public unionFind(int num) {
                 this.ids = new int[num];
                 Arrays.fill(ids, -1);
                 this.count = 0;
             }
             public int find(int num) {
                 return ids[num];
             }
             public boolean union(int n1, int n2) {
                 int id1=ids[n1], id2=ids[n2];
                 if (id1 != id2) {
                     for (int i=0; i<ids.length; i++) {
                         if (ids[i] == id2) {
                             ids[i] = id1;
                         }
                     }
                     count--;
                     return true;
                 }
                 return false;
             }
         }
    }
