207. Course Schedule

There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // transform courses into graph
        int[] indegree = new int[numCourses];
        for(int i = 0; i < prerequisites.length; i++) {
            indegree[prerequisites[i][0]]++;
        }
        
        // Add nodes with 0 indegree into Queue
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i = 0; i < numCourses; i++) {
            if(indegree[i] == 0) {
                q.offer(i);
            }
        }
        
        // How many courses don't need prerequisites.
        int FinishedCourse = q.size();
        while(!q.isEmpty()) {
            int current = q.poll();
            for(int i = 0; i < prerequisites.length; i++) {
                if(prerequisites[i][1] == current) {
                    indegree[prerequisites[i][0]]--;
                    if(indegree[prerequisites[i][0]] == 0) {
                        q.offer(prerequisites[i][0]);
                        FinishedCourse++;
                    }
                }
            }
        }
        return FinishedCourse == numCourses;
    }
}