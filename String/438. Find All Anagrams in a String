438. Find All Anagrams in a String

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".



public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<Integer>();
        if(s == null || p == null || s.length() == 0 || p.length() == 0 || s.length() < p.length()) {
            return list;
        }
        int start = 0;
        int count = p.length();
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i = 0; i < p.length(); i++) {
            char c = p.charAt(i);
            if(map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(map.containsKey(c)) {
                if(map.get(c) > 0) {
                    count--;
                }
                map.put(c, map.get(c) - 1);
            }
            if(count == 0) {
                list.add(start);
            }
            if(i - start + 1 == p.length()) {
                char ch = s.charAt(start);
                if(map.containsKey(ch)) {
                    if(map.get(ch) >= 0) {
                        count++;
                    }
                    map.put(ch, map.get(ch) + 1);
                }
                start++;
            }
        }
        return list;
    }
    
    /**
    
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<Integer>();
        if(s == null || s.length() == 0 || p == null || p.length() == 0 || s.length() < p.length()) {
            return list;
        }
        int start = 0;
        int count = p.length();
        int[] array = new int[256];
        for(int i = 0; i < p.length(); i++) {
            array[p.charAt(i) - '0']++;
        } 
        for(int i = 0; i < s.length(); i++) {
            int index = s.charAt(i) - '0';
            if(array[index] > 0) {
                count--;
            }
            array[index]--;
            if(count == 0) {
                list.add(start);
            }
            if(i - start + 1 == p.length()) {
                if(array[s.charAt(start) - '0'] >= 0) {
                    count++;
                }
                array[s.charAt(start) - '0']++;
                start++;
            }
        }
        return list;
    }
    */
}


