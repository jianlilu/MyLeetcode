216. Combination Sum III

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
         List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(n > 45) {
            return result;
        }
        List<Integer> list = new ArrayList<Integer>();
        helper(result, list, k, n, 1);
        return result;
    }
    private void helper(List<List<Integer>> result, List<Integer> list, int k, int n, int start) {
        if(n == 0 && k == 0) {
            result.add(new ArrayList<Integer>(list));
        }
        if(n != 0 && k == 0) {
            return;
        }
        for(int i = start; i <= 9; i++) {
            list.add(i);
            helper(result, list, k - 1, n - i, i + 1);
            list.remove(list.size() - 1);
        }
    }
}



