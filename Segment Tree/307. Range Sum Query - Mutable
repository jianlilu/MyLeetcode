307. Range Sum Query - Mutable

Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.

Segment Tree Array
public class NumArray {
    int[] treeArray;
    int[] array;
    public NumArray(int[] nums) {
        this.array = nums;
        int length = (int)Math.ceil(Math.log(array.length) / Math.log(2));
        length = (1 << length + 1) - 1;
        this.treeArray = new int[length];
        buildTree(array, 0, nums.length - 1, 0);
    }
    private int buildTree(int[] nums, int start, int end, int pos) {
        if(start > end) {
            return 0;
        }
        if(start == end) {
            treeArray[pos] = nums[start];
            return treeArray[pos];
        }
        int mid = start + (end - start) / 2;
        int leftSum = buildTree(nums, start, mid, pos * 2 + 1);
        int rightSum = buildTree(nums, mid + 1, end, pos * 2 + 2);
        treeArray[pos] = leftSum + rightSum;
        return leftSum + rightSum;
    }

    void update(int i, int val) {
        int diff = val - array[i];
        array[i] = val;
        updateTree(i, val, 0, array.length - 1, 0, diff);
    }
    
    private void updateTree(int i, int val, int start, int end, int pos, int diff) {
        treeArray[pos] += diff;
        if(start == end) {
            return;
        }
        int mid = start + (end - start) / 2;
        if(i <= mid) {
            updateTree(i, val, start, mid, 2 * pos + 1, diff);
        } else {
            updateTree(i, val, mid + 1, end, 2 * pos + 2, diff);
        }
    }
    

    public int sumRange(int i, int j) {
        return getSum(i, j, 0, array.length - 1, 0);
    }
    
    private int getSum(int i, int j, int start, int end, int pos) {
        if(j < start || i > end) {
            return 0;
        }
        if(start >= i && end <= j) {
            return treeArray[pos];
        }
        int mid = start + (end - start) / 2;
        return getSum(i, j, start, mid, pos * 2 + 1) + getSum(i, j, mid + 1, end, pos * 2 + 2);
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);




Segment Tree
public class NumArray {
    public class SegmentTreeNode {
        int start, end, sum;
        SegmentTreeNode left, right;
        public SegmentTreeNode(int start, int end, int sum) {
            this.start = start;
            this.end = end;
            this.sum = sum;
            left = null;
            right = null;
        }
    }
    SegmentTreeNode current = null;
    public NumArray(int[] nums) {
        current = buildTree(nums, 0, nums.length - 1);
    }
    private SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if(start > end) {
            return null;
        }
        if(start == end) {
            SegmentTreeNode root = new SegmentTreeNode(start, end, nums[start]);
            return root;
        } else {
            int mid = start + (end - start) / 2;
            SegmentTreeNode left = buildTree(nums, start, mid);
            SegmentTreeNode right = buildTree(nums, mid + 1, end);
            SegmentTreeNode root = new SegmentTreeNode(start, end, left.sum + right.sum);
            root.left = left;
            root.right = right;
            return root;
        }
    }

    void update(int i, int val) {
        update(current, i, val);
    }
    
    private void update(SegmentTreeNode root, int i, int val) {
        
        if(root.start == i && root.end == i) {
            root.sum = val;
            return;
        }
        int mid = root.start + (root.end - root.start) / 2;
        if(i <= mid) {
            update(root.left, i, val);
        } else {
            update(root.right, i, val);
        }
        root.sum = root.left.sum + root.right.sum;
    }

    public int sumRange(int i, int j) {
        return sumRange(current, i, j);
    }
    private int sumRange(SegmentTreeNode root, int i, int j) {
        if(root.start == i && root.end == j) {
            return root.sum;
        }
        int mid = root.start + (root.end - root.start) / 2;
        if(j <= mid) {
            return sumRange(root.left, i, j);
        } else if(i >= mid + 1) {
            return sumRange(root.right, i, j);
        } else {
            return sumRange(root.left, i, mid) + sumRange(root.right, mid + 1, j);
        }
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);