44. Wildcard Matching

Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false


dp[i][j]  s of length i  and  p of length j 

base case:
1. dp[0][0] = true 
2. dp[i][0] = false (i > 0)   s: not empty  p: empty
3. dp[0][j] depends (j > 0)   dp[0][j - 1] == true && p[j] == '*'  dp[0][j] = true

recurrence relationship:
1. s[i] == p[j] || p[j] == '?' dp[i][j] = dp[i - 1][j - 1]
2. p[j] == '*'   empty sequence: dp[i][j] = dp[i][j - 1]
                 not empty sequence: dp[i][j] = dp[i - 1][j]



public class Solution {
    public boolean isMatch(String s, String p) {
        if(s == null || p == null) {
        	return false;
        }
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[0][0] = true;
        for(int j = 1; j < dp[0].length; j++) {
        	dp[0][j] = dp[0][j - 1] && p.charAt(j - 1) == '*';
        }
        for(int i = 1; i < dp.length; i++) {
        	for(int j = 1; j < dp[0].length; j++) {
        		if(s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
        			dp[i][j] = dp[i - 1][j - 1];
        		} else if(p.charAt(j - 1) == '*') {
        			dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
        		}
        	}
        }
        return dp[s.length()][p.length()];
    }
}
