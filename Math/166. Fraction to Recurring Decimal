166. Fraction to Recurring Decimal

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

For example,

Given numerator = 1, denominator = 2, return "0.5".
Given numerator = 2, denominator = 1, return "2".
Given numerator = 2, denominator = 3, return "0.(6)".
Hint:

No scary math, just apply elementary math knowledge. Still remember how to perform a long division?
Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?
Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly.

public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if(denominator == 0) {
            return "MAX";
        }
        if(numerator == 0) {
            return "0";
        }
        if(denominator == 1) {
            return "" + numerator;
        }
        boolean isNegative = false;
        if((numerator < 0 && denominator > 0) || (numerator > 0 && denominator < 0)) {
            isNegative = true;
        }
        long numerator1 = Math.abs((long)numerator);
        long denominator1 = Math.abs((long)denominator);
        StringBuffer sb = new StringBuffer();
        long remainder = numerator1 % denominator1;
        long num = numerator1 / denominator1;
        if(isNegative) {
            sb.append("-");
        }
        sb.append(num);
        if(remainder == 0) {
            return sb.toString();
        }
        sb.append(".");
        int position = sb.length();
        HashMap<Long, Integer> map = new HashMap<Long, Integer>();
        while(remainder != 0) {
            map.put(remainder, position);
            remainder *= 10;
            num = remainder / denominator1;
            sb.append(num);
            remainder = remainder % denominator1;
            if(map.containsKey(remainder)) {
                int index = map.get(remainder);
                sb.insert(index, "(");
                sb.append(")");
                return sb.toString();
            }
            position++;
        }
        return sb.toString();
    }
}