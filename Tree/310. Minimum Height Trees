310. Minimum Height Trees

For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]

public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> result = new ArrayList<Integer>();
        if(n <= 0) {
            return result;
        }
        if(n == 1) {
            result.add(0);
            return result;
        }
        List<Set<Integer>> graph = new ArrayList<Set<Integer>>();
        for(int i = 0; i < n; i++) {
            graph.add(new HashSet<Integer>());
        }
        for(int[] edge: edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < graph.size(); i++) {
            if(graph.get(i).size() == 1) {
                queue.offer(i);
            }
        }
        int count = n;
        while(count > 2) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                int current = queue.poll();
                count--;
                for(int adj: graph.get(current)) {
                    graph.get(adj).remove(current);
                    if(graph.get(adj).size() == 1) {
                        queue.offer(adj);
                    }
                }
            }
        }
        while(!queue.isEmpty()) {
            result.add(queue.poll());
        }
        return result;
    }
}