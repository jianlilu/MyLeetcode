449. Serialize and Deserialize BST

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) {
            return "null";
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        StringBuffer sb = new StringBuffer();
        while(!stack.isEmpty()) {
            TreeNode current = stack.pop();
            sb.append(current.val).append(",");
            if(current.right != null) {
                stack.push(current.right);
            }
            if(current.left != null) {
                stack.push(current.left);
            }
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.equals("null")) {
            return null;
        }
        String[] s = data.split(",");
        Queue<Integer> queue = new LinkedList<Integer>();
        for(String e: s) {
            queue.offer(Integer.parseInt(e));
        }
        return getNode(queue);
    }
    // 
    private TreeNode getNode(Queue<Integer> queue) {
        if(queue.isEmpty()) {
            return null;
        }
        // 5, 3, 2, 6, 7
        TreeNode root = new TreeNode(queue.poll());
        Queue<Integer> leftQueue = new LinkedList<Integer>();
        // leftQueue: 3, 2
        while(!queue.isEmpty() && queue.peek() < root.val) {
            leftQueue.offer(queue.poll());
        } 
        root.left = getNode(leftQueue);
        // queue: 6, 7
        root.right = getNode(queue);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));