17. Letter Combinations of a Phone Number

Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> list = new ArrayList<String>();
        if(digits == null || digits.length() == 0) {
            return list;
        }
        String[] dictionary = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        StringBuffer sb = new StringBuffer();
        helper(digits, list, dictionary, sb, 0);
        return list;
    }
    private void helper(String digits, List<String> list, String[] dictionary, StringBuffer sb, int start) {
        if(start == digits.length()) {
            list.add(new String(sb.toString()));
            return;
        }
        char c = digits.charAt(start);
        for(int i = 0; i < dictionary[c - '0'].length(); i++) {
            sb.append(dictionary[c - '0'].charAt(i));
            helper(digits, list, dictionary, sb, start + 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}


public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> list = new ArrayList<String>();
        String[] dict = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        if(digits == null || digits.length() == 0) {
            return list;
        }
        dfs(digits, list, "", 0, dict);
        return list;
    }
    private void dfs(String digits, List<String> list, String s, int index, String[] dict) {
        if(s.length() == digits.length()) {
            list.add(s);
            return;
        }
        String current = dict[digits.charAt(index) - '0'];
        for(int i = 0; i < current.length(); i++) {
            dfs(digits, list, s + current.charAt(i), index + 1, dict);
        }
    }
}

