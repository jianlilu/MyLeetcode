211. Add and Search Word - Data structure design

Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

Define an inner class TrieNode. TrieNode with isWord set to true means there is a word that ends at this node.
addWord method can be easily done iteratively.
It's easier to implement search method recursively, using another helper method. search(root, word, index) means: Search the character of the word at a index from root. Note that word[index] is in subtree of root in my definition, not at node root itself. When the last index has been searched, and the current node has isWord set to true, return true. If root is null, it means the current path ends earlier and is missing remaining characters starting from index.

public class WordDictionary {
    private class TrieNode {
        TrieNode[] children;
        boolean isWord;
        
        public TrieNode() {
            children = new TrieNode[26];
            isWord = false;
        }
    }
    
    private TrieNode root;
    
    public WordDictionary() {
        root = new TrieNode();
    }
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); i++) {
            char x = word.charAt(i);
            if (cur.children[x - 'a'] == null) {
                cur.children[x - 'a'] = new TrieNode();
            }
            cur = cur.children[x - 'a'];
        }
        cur.isWord = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return search(root,word.toCharArray(),0);
    }
    
    private boolean search(TrieNode root, char[] word, int index) {
        if (root == null) return false;
        if (index == word.length) {
            return root.isWord;
        }
        char x = word[index];
        if (x == '.') {
            for (int i = 0; i < 26; i++) {
                if (search(root.children[i], word, index + 1)) return true;
            }
            return false;
        } else {
            return search(root.children[x - 'a'], word, index + 1); 
        }
    }
}

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");