451. Sort Characters By Frequency

Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

HashMap + heap   nlogn
public class Solution {
    public String frequencySort(String s) {
        if(s == null || s.length() <= 1) {
            return s;
        }
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(!map.containsKey(c)) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
            }
        }
        PriorityQueue<Character> pq = new PriorityQueue<Character>(new Comparator<Character>() {
            public int compare(Character c1, Character c2) {
                return map.get(c2) - map.get(c1);
            }
        });
        for(char c: map.keySet()) {
            pq.add(c);
        }
        StringBuffer sb = new StringBuffer();
        while(!pq.isEmpty()) {
            char c = pq.poll();
            int num = map.get(c);
            for(int i = 0; i < num; i++) {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}

bucket sort  O(n)
public class Solution {
    public String frequencySort(String s) {
        if(s == null || s.length() <= 1) {
            return s;
        }
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int maxFreq = 1;
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(!map.containsKey(c)) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
                maxFreq = Math.max(maxFreq, map.get(c));
            }
        }
        String[] bucket = new String[maxFreq];
        // build a bucket order by frequency of each character
        // Aabb ->   0: Aa, 1: b
        for(Character c: map.keySet()) {
            int freq = map.get(c);
            if(bucket[freq - 1] == null) {
                bucket[freq - 1] = "" + c;
            } else {
                bucket[freq - 1] = bucket[freq - 1] + c;
            }
        }
        StringBuffer sb = new StringBuffer();
        for(int i = bucket.length - 1; i >= 0; i--) {
            if(bucket[i] != null) {
                String str = bucket[i];
                for(int j = 0; j < str.length(); j++) {
                    char c = str.charAt(j);
                    int num = map.get(c);
                    for(int k = 0; k < num; k++) {
                        sb.append(c);
                    }
                }
            }
        }
        return sb.toString();
    }
}



