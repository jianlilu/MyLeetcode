291. Word Pattern II

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.

Examples:
pattern = "abab", str = "redblueredblue" should return true.
pattern = "aaaa", str = "asdasdasdasd" should return true.
pattern = "aabb", str = "xyzabcxzyabc" should return false.
Notes:
You may assume both pattern and str contains only lowercase letters.

public class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        if((pattern == null) && str == null || (pattern.length() == 0 && str.length() == 0)) {
            return true;
        }
        if(pattern == null || str == null || pattern.length() == 0 || str.length() == 0) {
            return false;
        }
        Map<Character, String> map = new HashMap<Character, String>();
        Set<String> set = new HashSet<String>();
        return isMatch(str, 0, pattern, 0, map, set);
    }
    private boolean isMatch(String str, int i, String pattern, int j, Map<Character, String> map, Set<String> set) {
        // base case
        if(i == str.length() && j == pattern.length()) {
            return true;
        }
        if(i == str.length() || j == pattern.length()) {
            return false;
        }
        char c = pattern.charAt(j);
        if(map.containsKey(c)) {
            String s = map.get(c);
            if(!str.startsWith(s, i)) {
                return false;
            }
            return isMatch(str, i + s.length(), pattern, j + 1, map, set);
        }
        // pattern character does not exist in the map
        for(int k = i; k < str.length(); k++) {
            String p = str.substring(i, k + 1);
            if(set.contains(p)) {
                continue;
            }
            map.put(c, p);
            set.add(p);
            // continue to match the rest
            if(isMatch(str, k + 1, pattern, j + 1, map, set)) {
                return true;
            }
            map.remove(c);
            set.remove(p);
        }
        return false;
    }
}