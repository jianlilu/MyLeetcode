25. Reverse Nodes in k-Group

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Show Company Tags
Show Tags
Show Similar Problems


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        while(head != null) {
            ListNode nextHead = head;
            ListNode end = head;
            for(int i = 1; i <= k; i++) {
                if(nextHead == null) {
                    return dummy.next;
                }
                nextHead = nextHead.next;
            }
            ListNode current = reverse(head, nextHead);
            prev.next = current;
            prev = end;
            head = nextHead;
        }
        return dummy.next;
    }
    private ListNode reverse(ListNode head, ListNode nextPair) {
        ListNode prev = nextPair;
        while(head != nextPair) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}


