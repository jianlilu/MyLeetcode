325. Maximum Size Subarray Sum Equals k

Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:
Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time?

sum of index 0: i   [1, 0, 5, 3, 6]
sum of index 1: 3   [3 - 1 = 2]



public class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        if(nums == null || nums.length = 0) {
        	return 0;
        }
        int max = 0;
        int sum = 0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(0, -1);
        for(int i = 0; i < nums.length; i++) {
        	sum += nums[i];
        	if(!map.containsKey(sum)) {
        		map.put(sum, i);
        	}
        	if(map.containsKey(sum - k)) {
        		int index = map.get(sum - k);
        		max = Math.max(max, i - index);
        	}
        }
        return max;
    }
}


