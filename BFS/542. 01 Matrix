542. 01 Matrix

Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.
Example 1: 
Input:

0 0 0
0 1 0
0 0 0
Output:
0 0 0
0 1 0
0 0 0
Example 2: 
Input:

0 0 0
0 1 0
1 1 1
Output:
0 0 0
0 1 0
1 2 1
Note:
The number of elements of the given matrix will not exceed 10,000.
There are at least one 0 in the given matrix.
The cells are adjacent in only four directions: up, down, left and right.

BFS

public class Solution {
    public List<List<Integer>> updateMatrix(List<List<Integer>> matrix) {
        if(matrix == null || matrix.size() == 0 || matrix.get(0).size() == 0) {
            return matrix;
        }
        boolean[][] visited = new boolean[matrix.size()][matrix.get(0).size()];
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix.get(0).size(); j++) {
                if(matrix.get(i).get(j) == 0) {
                    visited[i][j] = true;
                    queue.offer(i * matrix.get(0).size() + j);
                }
            }
        }
        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};
        while(!queue.isEmpty()) {
            int current = queue.poll();
            int x = current / matrix.get(0).size();
            int y = current % matrix.get(0).size();
            for(int k = 0; k < dx.length; k++) {
                int newX = x + dx[k];
                int newY = y + dy[k];
                if(newX < 0 || newX >= matrix.size() || newY < 0 || newY >= matrix.get(0).size() || visited[newX][newY]) {
                    continue;
                }
                visited[newX][newY] = true;
                matrix.get(newX).set(newY, matrix.get(x).get(y) + 1);
                queue.offer(newX * matrix.get(0).size() + newY);
            }
        }
        return matrix;
    }
    
}


DFS
public class Solution {
    public List<List<Integer>> updateMatrix(List<List<Integer>> matrix) {
        if(matrix == null || matrix.size() == 0 || matrix.get(0).size() == 0) {
            return matrix;
        }
        boolean[][] visited = new boolean[matrix.size()][matrix.get(0).size()];
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix.get(0).size(); j++) {
                if(matrix.get(i).get(j) == 0) {
                    dfs(matrix, i, j, 0, visited);
                }
            }
        }
        return matrix;
    }
    private void dfs(List<List<Integer>> matrix, int i, int j, int distance, boolean[][] visited) {
        if(i < 0 || i >= matrix.size() || j < 0 || j >= matrix.get(0).size()|| (matrix.get(i).get(j) == 0 && distance != 0)) {
            return;
        }
        if(matrix.get(i).get(j) != 1 && matrix.get(i).get(j) != 0 && matrix.get(i).get(j) <= distance) {
            return;
        }
        if(matrix.get(i).get(j) == 1 && visited[i][j]) {
            return;
        }
        visited[i][j] = true;
        matrix.get(i).set(j, distance);
        dfs(matrix, i + 1, j, distance + 1, visited);
        dfs(matrix, i - 1, j, distance + 1, visited);
        dfs(matrix, i, j + 1, distance + 1, visited);
        dfs(matrix, i, j - 1, distance + 1, visited);
    }
}