138. Copy List with Random Pointer

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null) {
            return null;
        }
        HashMap<RandomListNode, RandomListNode> map = new HashMap<RandomListNode, RandomListNode>();
        RandomListNode current = head;
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode prev = dummy;
        
        //Copy nodes
        while(current != null) {
            RandomListNode node = new RandomListNode(current.label);
            map.put(current, node);
            prev.next = node;
            prev = prev.next;
            current = current.next;
        }
        
        // Build random pointers
        while(head != null) {
            if(head.random != null) {
                RandomListNode randomNode = head.random;
                map.get(head).random = map.get(randomNode);
            }
            head = head.next;

        }
        return dummy.next;
    }
}