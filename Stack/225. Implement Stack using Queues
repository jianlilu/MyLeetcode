225. Implement Stack using Queues

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
Update (2015-06-11):
The class name of the Java function had been updated to MyStack instead of Stack.

class MyStack {
    // Push element x onto stack.
    private Queue<Integer> queue1;
    private Queue<Integer> queue2;
    public MyStack() {
        queue1 = new LinkedList<Integer>();
        queue2 = new LinkedList<Integer>();
    }
    public void push(int x) {
        if(queue1.isEmpty()) {
            queue2.offer(x);
        } else {
            queue1.offer(x);
        }
    }

    // Removes the element on top of the stack.
    public void pop() {
        Queue<Integer> queue3 = queue1.isEmpty()? queue2: queue1;
        Queue<Integer> queue4 = queue1.isEmpty()? queue1: queue2;
        while(!queue3.isEmpty()) {
            int num = queue3.poll();
            if(!queue3.isEmpty()) {
                queue4.offer(num);
            }
        }
    }

    // Get the top element.
    public int top() {
        int num = 0;
        Queue<Integer> queue3 = queue1.isEmpty()? queue2: queue1;
        Queue<Integer> queue4 = queue1.isEmpty()? queue1: queue2;
        while(!queue3.isEmpty()) {
            num = queue3.poll();
            queue4.offer(num);
        }
        return num;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }
}