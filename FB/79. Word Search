79. Word Search

Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.
Show Company Tags
Show Tags
Hide Similar Problems

public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0 || board[0].length == 0 || word == null) return false;  
        for(int i = 0; i < board.length; i++){  
            for(int j = 0; j < board[0].length; j++){  
                if(board[i][j] == word.charAt(0)){  
                    if(find(board, i, j, word, 0)){  
                        return true;  
                    }  
                }  
            }  
        }  
        return false;  
    }  
    private boolean find(char[][] board, int i, int j, String word, int index){  
        if(index == word.length()) return true;  
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) return false;  
        board[i][j] = '#';  
        boolean result = find(board, i - 1, j, word, index + 1) || find(board, i, j - 1, word, index + 1)   
                        || find(board, i + 1, j, word, index + 1) || find(board, i, j + 1, word, index + 1);  
        board[i][j] = word.charAt(index);  
        return result;  
    }
}