127. Word Ladder

Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        if(beginWord == null || beginWord.length() == 0 || endWord == null || endWord.length() == 0 || wordList.size() == 0) {
            return 0;
        }
        Queue<String> queue = new LinkedList<String>();
        queue.offer(beginWord);
        int length = 1;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                String s = queue.poll();
                for(int j = 0; j < s.length(); j++) {
                    for(char c = 'a'; c <= 'z'; c++) {
                        if(c == s.charAt(j)) {
                            continue;
                        }
                        String newS = replace(s, j, c);
                        if(newS.equals(endWord)) {
                            return length + 1;
                        }
                        if(wordList.contains(newS)) {
                            queue.offer(newS);
                            wordList.remove(newS);
                        }
                    }  
                }
            }
            length++;
        }
        return 0;
    }
    private String replace(String s, int index, char c) {  
        char[] chars = s.toCharArray();  
        chars[index] = c;  
        return new String(chars);  
    }  
}