113. Path Sum II

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        List<Integer> subList = new ArrayList<Integer>();
        dfs(list, subList, root, sum);
        return list;
    }
    private void dfs(List<List<Integer>> list, List<Integer> subList, TreeNode root, int sum) {
        if(root == null) {
            return;
        }
        if(root.left == null && root.right == null) {
            if(sum == root.val) {
                subList.add(root.val);
                list.add(new ArrayList<Integer>(subList));
                subList.remove(subList.size() - 1);
            }
            return;
        }
        subList.add(root.val);
        dfs(list, subList, root.left, sum - root.val);
        dfs(list, subList, root.right, sum - root.val);
        subList.remove(subList.size() - 1);
    }
}