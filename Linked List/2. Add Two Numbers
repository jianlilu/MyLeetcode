2. Add Two Numbers

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null) {
            return l2;
        }
        if(l2 == null) {
            return l1;
        }
        ListNode dummy = new ListNode(0);
        ListNode prev = dummy;
        int carry = 0;
        while(l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            ListNode current = new ListNode(sum % 10);
            prev.next = current;
            prev = current;
            l1 = l1.next;
            l2 = l2.next;
        }
        ListNode remain = l1 == null? l2: l1;
        while(remain != null) {
            int sum = remain.val + carry;
            carry = sum / 10;
            ListNode current = new ListNode(sum % 10);
            prev.next = current;
            prev = current;
            remain = remain.next;
        }
        if(carry == 1) {
            ListNode current = new ListNode(1);
            prev.next = current;
        }
        return dummy.next;
    }
}