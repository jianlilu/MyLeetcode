379. Design Phone Directory

Design a Phone Directory which supports the following operations:

get: Provide a number which is not assigned to anyone.
check: Check if a number is available or not.
release: Recycle or release a number.


public class PhoneDirectory {
    private int max = 0;
    private boolean[] notExist;
    private Queue<Integer> queue;
    /** Initialize your data structure here
        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */
    public PhoneDirectory(int maxNumbers) {
        notExist = new boolean[maxNumbers];
        queue = new LinkedList<Integer>();
        for(int i = 0; i < maxNumbers; i++) {
            queue.offer(i);
        }
        max = maxNumbers - 1;
    }
    
    /** Provide a number which is not assigned to anyone.
        @return - Return an available number. Return -1 if none is available. */
    public int get() {
        if(queue.isEmpty()) {
            return -1;
        }
        int num = queue.poll();
        notExist[num] = true;
        return num;
    }
    
    /** Check if a number is available or not. */
    public boolean check(int number) {
        return number <= max && !notExist[number];
    }
    
    /** Recycle or release a number. */
    public void release(int number) {
        if(number > max || !notExist[number]) {
            return;
        }
        notExist[number] = false;
        queue.offer(number);
    }
}

/**
 * Your PhoneDirectory object will be instantiated and called as such:
 * PhoneDirectory obj = new PhoneDirectory(maxNumbers);
 * int param_1 = obj.get();
 * boolean param_2 = obj.check(number);
 * obj.release(number);
 */