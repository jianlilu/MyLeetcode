103. Binary Tree Zigzag Level Order Traversal

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        if(root == null) {
            return list;
        }
        boolean normalOrder = true;
        Stack<TreeNode> current = new Stack<TreeNode>();
        Stack<TreeNode> next = new Stack<TreeNode>();
        Stack<TreeNode> temp;
        current.push(root);
        while(!current.isEmpty()) {
            ArrayList<Integer> subList = new ArrayList<Integer>();
            while(!current.isEmpty()) {
                TreeNode node = current.pop();
                subList.add(node.val);
                if(normalOrder) {
                    if(node.left != null) {
                        next.push(node.left);
                    }
                    if(node.right != null) {
                        next.push(node.right);
                    }
                } else {
                    if(node.right != null) {
                        next.push(node.right);
                    }
                    if(node.left != null) {
                        next.push(node.left);
                    }
                }
            }
            list.add(subList);
            temp = current;
            current = next;
            next = temp;
            normalOrder = !normalOrder;
        }
        return list;
    }
}