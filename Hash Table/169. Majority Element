169. Majority Element

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.



public class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int candidate = 0;
        int count = 0;
        for(int i = 0; i < nums.length; i++) {
            if(count == 0) {
                candidate = nums[i];
                count = 1;
            } else if(nums[i] != candidate) {
                count--;
            } else {
                count++;
            }
        }
        return candidate;
    }
}

HashMap
public class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        if(nums.length == 1) {
            return nums[0];
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if(!map.containsKey(num)) {
                map.put(num, 1);
            } else {
                int count = map.get(num) + 1;
                if(count > nums.length / 2) {
                    return num;
                }
                map.put(num, count);
            }
        }
        return 0;
    }
}