249. Group Shifted Strings

Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
A solution is:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]

public class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> res = new ArrayList<List<String>>();
        if(strings == null || strings.length == 0) {
            return res;
        }
        // key: gap between each letter in a String, value: List of Strings
        HashMap<String, List<String>> map = new HashMap<String, List<String>>();
        for(String s: strings) {
            String gap = getGap(s);
            if(!map.containsKey(gap)) {
                map.put(gap, new ArrayList<String>());
            }
            map.get(gap).add(s);
        }
        for(List<String> list: map.values()) {
            res.add(list);
        }
        return res;
    }
    private String getGap(String s) {
        if(s.length() == 1) {
            return "#";
        }
        StringBuffer sb = new StringBuffer();
        for(int i = 0; i < s.length() - 1; i++) {
        	int diff = s.charAt(i) - s.charAt(i + 1);
        	sb.append(diff >= 0? diff: diff + 26).append(".");
        }
        return sb.toString();
    }
}