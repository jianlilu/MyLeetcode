261. Graph Valid Tree

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false

public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if(n <= 0) {
            return false;
        }
        if(edges.length == 0) {
            return n == 1;
        }
        // Build graph
        Set[] graph = new Set[n];
        for(int i = 0; i < edges.length; i++) {
            if(graph[edges[i][0]] == null) {
                graph[edges[i][0]] = new HashSet<Integer>();
            }
            graph[edges[i][0]].add(edges[i][1]);
            if(graph[edges[i][1]] == null) {
                graph[edges[i][1]] = new HashSet<Integer>();
            }
            graph[edges[i][1]].add(edges[i][0]);
        }
        
        // BFS
        Queue<Integer> queue = new LinkedList<Integer>();
        boolean[] visited = new boolean[n];
        visited[0] = true;
        queue.offer(0);
        int count = 1;
        while(!queue.isEmpty()) {
            int current = queue.poll();
            Set<Integer> adjacent = graph[current];
            if(adjacent == null) {
                continue;
            }
            for(int node: adjacent) {
                if(visited[node]) {
                    return false;
                }
                queue.offer(node);
                visited[node] = true;
                graph[node].remove(current);
                count++;
            }
        }
        return count == n;
    }
}