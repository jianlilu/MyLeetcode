92. Reverse Linked List II

Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode fast = head;
        ListNode slow = head;
        for(int i = 0; i <= n - m; i++) {
            fast = fast.next;
        }
        for(int i = 1; i < m; i++) {
            slow = slow.next;
            fast = fast.next;
            prev = prev.next;
        }
        ListNode newHead = reverse(slow, fast);
        prev.next = newHead;
        return dummy.next;
    }
    private ListNode reverse(ListNode head, ListNode end) {
        ListNode prev = end;
        while(head != end) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}