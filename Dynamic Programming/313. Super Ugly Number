313. Super Ugly Number

Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k. For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super ugly numbers given primes = [2, 7, 13, 19] of size 4.

Note:
(1) 1 is a super ugly number for any given primes.
(2) The given numbers in primes are in ascending order.
(3) 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
(4) The nth super ugly number is guaranteed to fit in a 32-bit signed integer.

public class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        if(n <= 0 || primes == null || primes.length == 0) {
            return 0;
        }
        int[] index = new int[primes.length];
        int[] nums = new int[n];
        nums[0] = 1;
        for(int i = 1; i < n; i++) {
            nums[i] = Integer.MAX_VALUE;
            int currentIndex = -1;
            for(int j = 0; j < index.length; j++) {
                if(nums[index[j]] * primes[j] <= nums[i]) {
                    nums[i] = nums[index[j]] * primes[j];
                    currentIndex = j;
                }
            }
            index[currentIndex]++;
            if(nums[i] == nums[i - 1]) {
                i--;
            }
        }
        return nums[n - 1];
    }
}