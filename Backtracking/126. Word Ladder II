126. Word Ladder II

Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the word list
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
Return
  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]


先用BFS来构建undirected word graph，同时把每层的单词到start的距离也保存了。
第二步再用回溯+dfs的方法把一条条路径给找出来。

public class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, Set<String> wordList) {
        List<List<String>> result = new ArrayList<List<String>>();  
        HashMap<String, List<String>> wordGraph = new HashMap<String, List<String>>();  
        HashMap<String, Integer> distance = new HashMap<String, Integer>();  
        wordList.add(beginWord);  
        wordList.add(endWord);  
        bfs(beginWord, endWord, wordList, wordGraph, distance);  
        List<String> list = new ArrayList<String>();  
        list.add(beginWord);  
        dfs(beginWord, endWord, wordGraph, result, list, distance);  
        return result;  
    }  
    private void dfs(String current, String end, HashMap<String, List<String>> wordGraph,   
        List<List<String>> result, List<String> list, HashMap<String, Integer> distance){  
        if(current.equals(end)){  
            result.add(new ArrayList<String>(list));  
        } else {  
            for(String next: wordGraph.get(current)){  
                if(distance.get(current) == distance.get(next) - 1){  
                    list.add(next);  
                    dfs(next, end, wordGraph, result, list, distance);  
                    list.remove(list.size() - 1);  
                }  
            }  
        }  
    }  
    private void bfs(String start, String end, Set<String> dict, HashMap<String,  
        List<String>> wordGraph, HashMap<String, Integer> distance){  
        Queue<String> queue = new LinkedList<String>();  
        queue.offer(start);  
        distance.put(start, 0);  
        while(!queue.isEmpty()){  
            String current = queue.poll();  
            List<String> nextList = findAdjacent(current, dict);  
            wordGraph.put(current, nextList);  
            for(String next: nextList){  
                if(!distance.containsKey(next)){  
                    distance.put(next, distance.get(current) + 1);  
                    queue.offer(next);  
                }  
            }  
        }  
    }  
    private List<String> findAdjacent(String s, Set<String> dict){  
        List<String> result = new ArrayList<String>();  
        for(int i = 0; i < s.length(); i++){  
            for(char c = 'a'; c <= 'z'; c++){  
                if(c == s.charAt(i)){  
                    continue;  
                }  
                String temp = s.substring(0, i) + c + s.substring(i + 1);  
                if(dict.contains(temp)){  
                    result.add(temp);  
                }  
            }  
        }  
        return result;  
    }
}