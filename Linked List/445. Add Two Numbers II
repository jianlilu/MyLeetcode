445. Add Two Numbers II

You are given two linked lists representing two non-negative numbers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null) {
            return l2;
        }
        if(l2 == null) {
            return l1;
        }
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        listToStack(s1, l1);
        listToStack(s2, l2);
        int carry = 0;
        int sum = 0;
        ListNode next = null;
        ListNode current = null;
        while(!s1.isEmpty() && !s2.isEmpty()) {
            int value1 = s1.pop();
            int value2 = s2.pop();
            sum = value1 + value2 + carry;
            current = new ListNode(sum % 10);
            carry = sum / 10;
            current.next = next;
            next = current;
        }
        Stack<Integer> s3 = s1.isEmpty()? s2: s1;
        while(!s3.isEmpty()) {
            sum = carry + s3.pop();
            current = new ListNode(sum % 10);
            carry = sum / 10;
            current.next = next;
            next = current;
        }
        if(carry == 1) {
            current = new ListNode(1);
            current.next = next;
        }
        return current;
    }
    private void listToStack(Stack<Integer> s, ListNode l) {
        while(l != null) {
            s.push(l.val);
            l = l.next;
        }
    }
}