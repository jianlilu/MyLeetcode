85. Maximal Rectangle

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 6.

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int[] height = new int[matrix[0].length];
        int max = 0;
        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                if(matrix[i][j] == '1') {
                    height[j] = height[j] + 1;
                } else {
                    height[j] = 0;
                }
            }
            max = Math.max(max, findMaxArea(height));
        }
        return max;
    }
    private int findMaxArea(int[] height) {
        Stack<Integer> stack = new Stack<Integer>();
        int result = 0;
        for(int i = 0; i <= height.length; i++) {
            int num = i == height.length? -1: height[i];
            while(!stack.isEmpty() && num < height[stack.peek()]) {
                int h = height[stack.pop()];
                int w = stack.isEmpty()? i: i - stack.peek() - 1;
                result = Math.max(result, h * w);
            }
            stack.push(i);
        }
        return result;
    }
}