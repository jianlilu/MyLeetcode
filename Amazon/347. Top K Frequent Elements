347. Top K Frequent Elements

Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

hashmap + heap
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums == null || nums.length == 0 || k <= 0) {
            return list;
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int num: nums) {
            if(map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
                return map.get(b) - map.get(a);
            }
        });
        for(int key: map.keySet()) {
            pq.add(key);
        }
        for(int i = 0; i < k; i++) {
            list.add(pq.poll());
        }
        return list;
    }
}


O(n)  bucket sort
public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> list = new ArrayList<Integer>();
        if(nums == null || nums.length == 0 || k <= 0) {
            return list;
        }
        int maxFreq = 1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int num: nums) {
            if(map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
                maxFreq = Math.max(maxFreq, map.get(num));
            } else {
                map.put(num, 1);
            }
        }
        List<Integer>[] bucket = new List[maxFreq];
        for(int key: map.keySet()) {
            int freq = map.get(key);
            if(bucket[freq - 1] == null) {
                bucket[freq - 1] = new ArrayList<Integer>();
            }
            bucket[freq - 1].add(key);
        }
        for(int i = maxFreq - 1; i >= 0; i--) {
            if(bucket[i] != null) {
                List<Integer> current = bucket[i];
                for(int j = 0; j < current.size(); j++) {
                    list.add(current.get(j));
                    if(list.size() == k) {
                        return list;
                    }
                }
            }
        }
        return list;
    }
}