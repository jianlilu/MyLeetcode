297. Serialize and Deserialize Binary Tree

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    public String serialize(TreeNode root) {
    	if(root == null) {
    		return "";
    	}
        StringBuffer sb = new StringBuffer();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        sb.append(root.val);
        sb.append(",");
        while(!queue.isEmpty()) {
        	TreeNode node = queue.poll();
        	if(node.left == null) {
        		sb.append("null,");
        	} else {
        		queue.offer(node.left);
        		sb.append(node.left.val);
        		sb.append(",");
        	}
        	if(node.right == null) {
        		sb.append("null,");
        	} else {
        		queue.offer(node.right);
        		sb.append(node.right.val);
        		sb.append(",");
        	}
        }
        return sb.substring(0, sb.length() - 1).toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0) {
        	return null;
        }
        String[] nodes = data.split(",");
        TreeNode root = new TreeNode(Integer.parseInt(nodes[0]));
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        int index = 1;
        while(!queue.isEmpty()) {
        	TreeNode node = queue.poll();
        	if(!nodes[index].equals("null")) {
        		TreeNode left = new TreeNode(Integer.parseInt(nodes[index]));
        		node.left = left;
        		queue.offer(left);
        	} else {
        		node.left = null;
        	}
        	index++;
        	if(!nodes[index].equals("null")) {
        		TreeNode right = new TreeNode(Integer.parseInt(nodes[index]));
        		node.right = right;
        		queue.offer(right);
        	} else {
        		node.right = null;
        	}
        	index++;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

