222. Count Complete Tree Nodes

Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

public class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int leftCount = countNodes(root.left);
        int rightCount = countNodes(root.right);
        return leftCount + rightCount + 1;
    }




    /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int countNodes(TreeNode root) {
       if(root == null) {
            return 0;
        }
        int lc = 0;
        TreeNode root1 = root;
        while(root1 != null) {
            lc++;
            root1 = root1.left;
        }
        int rc = 0;
        TreeNode root2 = root;
        while(root2 != null) {
            rc++;
            root2 = root2.right;
        }
        if(lc == rc) {
            return (2 << (lc - 1)) - 1;
        } else {
            int leftCount = countNodes(root.left);
            int rightCount = countNodes(root.right);
            return leftCount + rightCount + 1;   
        }
    }
}