353. Design Snake Game

Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.

The snake is initially positioned at the top left corner (0,0) with length = 1 unit.

You are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.

Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.

When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.

Example:
Given width = 3, height = 2, and food = [[1,2],[0,1]].

Snake snake = new Snake(width, height, food);

Initially the snake appears at position (0,0) and the food at (1,2).

|S| | |
| | |F|

snake.move("R"); -> Returns 0

| |S| |
| | |F|

snake.move("D"); -> Returns 0

| | | |
| |S|F|

snake.move("R"); -> Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )

| |F| |
| |S|S|

snake.move("U"); -> Returns 1

| |F|S|
| | |S|

snake.move("L"); -> Returns 2 (Snake eats the second food)

| |S|S|
| | |S|

snake.move("U"); -> Returns -1 (Game over because snake collides with border)



public class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    public static class Position {
	    private int x;
	    private int y;
	    public Position(int x, int y) {
	        this.x = x;
	        this.y = y;
	    }
	    public void setX(int x) { 
            this.x = x;
        }
	    public void setY(int y) {
	        this.y = y;
	    }
	    public int getX() { 
            return x;
	    }
	    public int getY() {
	        return y;
	    }
	    public String toString() {
	        return x + "," + y;
	    }
	}
	
	private int width;
	private int height;
	private int[][] food;
	private int foodGet;
	private boolean gameOver;
	private HashSet<String> visited;
	private LinkedList<Position> snake;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
	    this.height = height;
	    this.food = food;
	    this.foodGet = 0;
	    this.gameOver = false;
	    this.visited = new HashSet<String>();
	    visited.add(new Position(0, 0).toString());
	    this.snake = new LinkedList<Position>();
	    this.snake.offer(new Position(0, 0));
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
            if(gameOver) {
	            return -1;
	        }
	        int widthIncre = 0;
	        int heightIncre = 0;
	        if(direction.equals("U")) {
	            widthIncre = 0;
	            heightIncre = -1;
	        } else if(direction.equals("L")) {
	            widthIncre = -1;
	            heightIncre = 0;
	        } else if(direction.equals("R")) {
	            widthIncre = 1;
	            heightIncre = 0;
	        } else if(direction.equals("D")) {
	            widthIncre = 0;
	            heightIncre = 1;
	        }
	        Position head = snake.getLast();
	        int headX = head.getX();
	        int headY = head.getY();
	        int newHeadX = headX + heightIncre;
	        int newHeadY = headY + widthIncre;
	        
	        // If the snake collides with the border
	        if(newHeadX < 0 || newHeadX >= height || newHeadY < 0 || newHeadY >= width) {
	            gameOver = true;
	            return -1;
	        } else {
	            Position newHead = new Position(newHeadX, newHeadY);
	            // If the snake meets the food, eat it!
	            if(foodGet < food.length && newHeadX == food[foodGet][0] && newHeadY == food[foodGet][1]) {
	                visited.add(newHead.toString());
	                snake.offer(newHead);
	                foodGet++;
	            } else {
	                Position tail = snake.poll();
	                visited.remove(tail.toString());
	                // If the snake collide with its body
	                if(visited.contains(newHead.toString())) {
	                    gameOver = true;
	                    return -1;
	                } else {
	                    visited.add(newHead.toString());
	                    snake.offer(newHead);
	                }
	            }
	            return foodGet;
	        }
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */




